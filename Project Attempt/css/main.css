* {
  color: red;
}

h1 {
  color: crimson;
}
h2 {
  color: red;
  text-decoration-skip-ink: none;
}
h3 {
  color: red;
}
body {
  background-color: black;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  line-height: 2rem;
}
p {
  color: white;
}

/* css rules */
/* selectors */
/* e.g. type/element [of html element/tag] selector h1 h2 p */
/* declaration block*/
/* declaration*/
/* property */
/* value */

/* element grouping */
/* body {
    color: blue;
}

h1,h2 {
    color: blue;
} */

#heading {
  color: black;
  background: red;
}

/* class selectors */
/* this should be used for COLOR GROUPS rather than GROUPING which is done by DIV and SPAN */
/* As opposed to id, class can be used at multiple places even though the effect is the same. id, should be used being unique. */

.outerhero {
  background: red;
  width: 50vw;
  height: 50vh;
}

.innerhero {
  background: black;
}
.subheading {
  font-style: italic;
}

.relative {
  font-size: 2em;
}

.absolute {
  font-size: 32px;
}

/* 1 em is relative to the Parent */
/* Default browser style (see user agent stylesheet in Chrome Dev Tools) is 16px, hence 1em is 16px */
/* This is the font size of the Browser, and it can be changed to Large instead of Medium in the Browser as its default font size */
/* We can set HTML font size to set the default */

/* DIV SPAN */
/* This is for grouping */
/* span is for styling inline */
/* To prepare for the Box Model */
/* One DIV, One BOX */

/* div {
    background:grey;
} */
span {
  text-transform: uppercase;
}

/* INHERITANCE */
/* Children will inherit styling of Parent unless Children have their own styling */
/* Not all preperty is going to be inherited e.g. border */

/* Last Rule and Specificity*/
/* CSS uses the Last Rule you put in the .css External File */
/* UNLESS there is CSS Specificity i.e. you are putting the class next to the tag. check out the W3C Specificity Measurement*/

/* Universal Selector * has the least specificity */

/* One pixel is one dot on the screen */
/* pixel is an absolute size, not responsive */
/* % is dependent on Parent */

/* vh - height - percent of the screen */
/* vw - width - percent of the screen */
/* Difference with % is that % can be relative to anything like the Parent div but vh/vw is relative to the screen */

/* calc()  perform math operations + - * / mix and match values*/
